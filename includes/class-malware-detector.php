<?php

if (!defined('ABSPATH')) {
    exit;
}

class WP_AI_Security_Scanner_Malware_Detector {
    
    private $database;
    private $signatures;
    private $confidence_threshold = 0.5;
    
    public function __construct() {
        $this->database = new WP_AI_Security_Scanner_Database();
        $this->signatures = $this->database->get_config('malware_signatures', array());
    }
    
    public function analyze_file($file_path, $content) {
        $threats = array();
        
        $signature_threats = $this->check_signatures($file_path, $content);
        $heuristic_threats = $this->heuristic_analysis($file_path, $content);
        $ai_threats = $this->ai_analysis($file_path, $content);
        
        $threats = array_merge($signature_threats, $heuristic_threats, $ai_threats);
        
        return $this->filter_and_score_threats($threats);
    }
    
    private function check_signatures($file_path, $content) {
        $threats = array();
        
        foreach ($this->signatures as $signature_name => $signature_data) {
            if (preg_match($signature_data['pattern'], $content, $matches)) {
                $threats[] = array(
                    'type' => $signature_name,
                    'severity' => $signature_data['severity'],
                    'description' => $signature_data['description'],
                    'confidence' => 0.9,
                    'evidence' => isset($matches[0]) ? substr($matches[0], 0, 200) : '',
                    'line_number' => $this->get_line_number($content, $matches[0])
                );
            }
        }
        
        return $threats;
    }
    
    private function heuristic_analysis($file_path, $content) {
        $threats = array();
        
        $suspicious_functions = array(
            'eval' => 'high',
            'exec' => 'high',
            'shell_exec' => 'high',
            'system' => 'high',
            'passthru' => 'high',
            'file_get_contents' => 'medium',
            'file_put_contents' => 'medium',
            'fopen' => 'medium',
            'fwrite' => 'medium',
            'curl_exec' => 'medium',
            'base64_decode' => 'low',
            'str_rot13' => 'low',
            'gzinflate' => 'medium',
            'gzuncompress' => 'medium'
        );
        
        foreach ($suspicious_functions as $function => $severity) {
            if (preg_match('/\b' . preg_quote($function) . '\s*\(/i', $content, $matches)) {
                $context = $this->get_function_context($content, $matches[0]);
                
                if ($this->is_suspicious_usage($function, $context)) {
                    $threats[] = array(
                        'type' => 'suspicious_function',
                        'severity' => $severity,
                        'description' => "Suspicious usage of function: $function",
                        'confidence' => $this->calculate_function_confidence($function, $context),
                        'evidence' => substr($context, 0, 200),
                        'line_number' => $this->get_line_number($content, $matches[0])
                    );
                }
            }
        }
        
        if (preg_match('/\$_(?:GET|POST|REQUEST|COOKIE)\s*\[.*?\]/', $content, $matches)) {
            $threats[] = array(
                'type' => 'user_input',
                'severity' => 'medium',
                'description' => 'Direct usage of user input without sanitization',
                'confidence' => 0.6,
                'evidence' => substr($matches[0], 0, 200),
                'line_number' => $this->get_line_number($content, $matches[0])
            );
        }
        
        if (preg_match('/(?:include|require)(?:_once)?\s*\(\s*\$/', $content, $matches)) {
            $threats[] = array(
                'type' => 'dynamic_include',
                'severity' => 'high',
                'description' => 'Dynamic file inclusion with variable',
                'confidence' => 0.8,
                'evidence' => substr($matches[0], 0, 200),
                'line_number' => $this->get_line_number($content, $matches[0])
            );
        }
        
        $obfuscation_score = $this->calculate_obfuscation_score($content);
        if ($obfuscation_score > 0.7) {
            $threats[] = array(
                'type' => 'obfuscated_code',
                'severity' => 'medium',
                'description' => 'Heavily obfuscated code detected',
                'confidence' => $obfuscation_score,
                'evidence' => 'High obfuscation score: ' . round($obfuscation_score, 2),
                'line_number' => 0
            );
        }
        
        return $threats;
    }
    
    private function ai_analysis($file_path, $content) {
        $threats = array();
        
        $entropy = $this->calculate_entropy($content);
        $suspicious_patterns = $this->detect_suspicious_patterns($content);
        $behavioral_score = $this->analyze_behavioral_patterns($content);
        
        if ($entropy > 7.5) {
            $threats[] = array(
                'type' => 'high_entropy',
                'severity' => 'medium',
                'description' => 'High entropy content suggesting encryption or obfuscation',
                'confidence' => min(($entropy - 7.5) / 2, 1.0),
                'evidence' => "Entropy score: $entropy",
                'line_number' => 0
            );
        }
        
        foreach ($suspicious_patterns as $pattern) {
            $threats[] = array(
                'type' => 'suspicious_pattern',
                'severity' => $pattern['severity'],
                'description' => $pattern['description'],
                'confidence' => $pattern['confidence'],
                'evidence' => $pattern['evidence'],
                'line_number' => $pattern['line_number']
            );
        }
        
        if ($behavioral_score > 0.6) {
            $threats[] = array(
                'type' => 'malicious_behavior',
                'severity' => 'high',
                'description' => 'Code exhibits malicious behavioral patterns',
                'confidence' => $behavioral_score,
                'evidence' => 'Behavioral analysis score: ' . round($behavioral_score, 2),
                'line_number' => 0
            );
        }
        
        return $threats;
    }
    
    private function calculate_entropy($content) {
        $chars = count_chars($content, 1);
        $length = strlen($content);
        $entropy = 0;
        
        foreach ($chars as $count) {
            $probability = $count / $length;
            $entropy -= $probability * log($probability, 2);
        }
        
        return $entropy;
    }
    
    private function calculate_obfuscation_score($content) {
        $score = 0;
        
        if (preg_match_all('/[a-zA-Z0-9+\/=]{50,}/', $content, $matches)) {
            $score += count($matches[0]) * 0.1;
        }
        
        if (preg_match_all('/\\\\x[0-9a-fA-F]{2}/', $content, $matches)) {
            $score += count($matches[0]) * 0.05;
        }
        
        if (preg_match_all('/str_rot13|base64_decode|gzinflate|gzuncompress/', $content, $matches)) {
            $score += count($matches[0]) * 0.2;
        }
        
        $avg_word_length = strlen($content) / (str_word_count($content) + 1);
        if ($avg_word_length > 20) {
            $score += 0.3;
        }
        
        return min($score, 1.0);
    }
    
    private function detect_suspicious_patterns($content) {
        $patterns = array();
        
        if (preg_match('/\$[a-zA-Z_][a-zA-Z0-9_]*\s*=\s*["\'][^"\']*["\'];\s*\$[a-zA-Z_][a-zA-Z0-9_]*\s*=\s*str_replace/', $content, $matches)) {
            $patterns[] = array(
                'severity' => 'medium',
                'description' => 'String replacement pattern commonly used in malware',
                'confidence' => 0.7,
                'evidence' => substr($matches[0], 0, 200),
                'line_number' => $this->get_line_number($content, $matches[0])
            );
        }
        
        if (preg_match('/\$[a-zA-Z_][a-zA-Z0-9_]*\s*=\s*\$[a-zA-Z_][a-zA-Z0-9_]*\s*\.\s*\$[a-zA-Z_][a-zA-Z0-9_]*/', $content, $matches)) {
            $patterns[] = array(
                'severity' => 'low',
                'description' => 'Variable concatenation pattern',
                'confidence' => 0.4,
                'evidence' => substr($matches[0], 0, 200),
                'line_number' => $this->get_line_number($content, $matches[0])
            );
        }
        
        if (preg_match('/for\s*\(\s*\$[a-zA-Z_][a-zA-Z0-9_]*\s*=\s*0.*?chr\s*\(/', $content, $matches)) {
            $patterns[] = array(
                'severity' => 'high',
                'description' => 'Character building loop commonly used in obfuscation',
                'confidence' => 0.8,
                'evidence' => substr($matches[0], 0, 200),
                'line_number' => $this->get_line_number($content, $matches[0])
            );
        }
        
        return $patterns;
    }
    
    private function analyze_behavioral_patterns($content) {
        $score = 0;
        
        if (preg_match('/wp_users.*password/', $content)) {
            $score += 0.4;
        }
        
        if (preg_match('/admin.*user.*add/', $content)) {
            $score += 0.3;
        }
        
        if (preg_match('/file_get_contents\s*\(\s*["\']https?:\/\//', $content)) {
            $score += 0.2;
        }
        
        if (preg_match('/curl.*exec.*post/i', $content)) {
            $score += 0.3;
        }
        
        if (preg_match('/mail\s*\(.*@.*\)/', $content)) {
            $score += 0.1;
        }
        
        if (preg_match('/\$_SERVER\s*\[\s*["\']HTTP_/', $content)) {
            $score += 0.2;
        }
        
        return min($score, 1.0);
    }
    
    private function filter_and_score_threats($threats) {
        $filtered = array();
        
        foreach ($threats as $threat) {
            if ($threat['confidence'] >= $this->confidence_threshold) {
                $filtered[] = $threat;
            }
        }
        
        usort($filtered, function($a, $b) {
            $severity_order = array('low' => 1, 'medium' => 2, 'high' => 3, 'critical' => 4);
            
            $a_severity = $severity_order[$a['severity']] ?? 0;
            $b_severity = $severity_order[$b['severity']] ?? 0;
            
            if ($a_severity === $b_severity) {
                return $b['confidence'] <=> $a['confidence'];
            }
            
            return $b_severity <=> $a_severity;
        });
        
        return $filtered;
    }
    
    private function get_line_number($content, $needle) {
        $pos = strpos($content, $needle);
        if ($pos === false) {
            return 0;
        }
        
        return substr_count($content, "\n", 0, $pos) + 1;
    }
    
    private function get_function_context($content, $function_call) {
        $pos = strpos($content, $function_call);
        if ($pos === false) {
            return '';
        }
        
        $start = max(0, $pos - 100);
        $end = min(strlen($content), $pos + strlen($function_call) + 100);
        
        return substr($content, $start, $end - $start);
    }
    
    private function is_suspicious_usage($function, $context) {
        switch ($function) {
            case 'eval':
                return preg_match('/eval\s*\(\s*\$/', $context) || preg_match('/base64_decode/', $context);
            
            case 'exec':
            case 'shell_exec':
            case 'system':
                return preg_match('/\$_(?:GET|POST|REQUEST)/', $context);
            
            case 'file_get_contents':
                return preg_match('/https?:\/\//', $context);
            
            case 'base64_decode':
                return preg_match('/base64_decode\s*\(\s*["\'][A-Za-z0-9+\/=]{50,}/', $context);
            
            default:
                return false;
        }
    }
    
    private function calculate_function_confidence($function, $context) {
        $base_confidence = 0.5;
        
        if (preg_match('/\$_(?:GET|POST|REQUEST)/', $context)) {
            $base_confidence += 0.3;
        }
        
        if (preg_match('/base64_decode|str_rot13|gzinflate/', $context)) {
            $base_confidence += 0.2;
        }
        
        if (preg_match('/eval|exec|system/', $context)) {
            $base_confidence += 0.4;
        }
        
        return min($base_confidence, 1.0);
    }
    
    public function update_signatures($new_signatures) {
        $this->signatures = array_merge($this->signatures, $new_signatures);
        $this->database->save_config('malware_signatures', $this->signatures);
        $this->database->save_config('last_signature_update', time());
        
        return true;
    }
    
    public function get_signature_count() {
        return count($this->signatures);
    }
    
    public function set_confidence_threshold($threshold) {
        $this->confidence_threshold = max(0.1, min(1.0, $threshold));
        return $this->confidence_threshold;
    }
}